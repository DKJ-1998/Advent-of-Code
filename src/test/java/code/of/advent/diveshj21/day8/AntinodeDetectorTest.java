package code.of.advent.diveshj21.day8;

import static org.junit.jupiter.api.Assertions.*;

import java.util.Arrays;
import java.util.stream.Stream;

import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;

class AntinodeDetectorTest {

    @ParameterizedTest
    @MethodSource
    void detect(String input, int expected) {
        var map = Arrays.stream(input.split("\n")).map(String::toCharArray).toArray(char[][]::new);
        var antinodeDetector = new AntinodeDetector(map);
        var actual = antinodeDetector.detect();
        assertEquals(expected, actual);
    }

    private static Stream<Arguments> detect() {
        return Stream.of(
            Arguments.of(
                """
..........
..........
..........
....a.....
........a.
.....a....
..........
......A...
..........
..........
                    """, 4),
            Arguments.of(
                """
............
........0...
.....0......
.......0....
....0.......
......A.....
............
............
........A...
.........A..
............
............
                    """, 14)
        );
    }

    @ParameterizedTest
    @MethodSource
    void detectManyAntinodes(String input, int expected) {
        var map = Arrays.stream(input.split("\n")).map(String::toCharArray).toArray(char[][]::new);
        var antinodeDetector = new AntinodeDetector(map);
        var actual = antinodeDetector.detectManyAntinodes();
        assertEquals(expected, actual);
    }

    private static Stream<Arguments> detectManyAntinodes() {
        return Stream.of(
            Arguments.of(
                """
T.........
...T......
.T........
..........
..........
..........
..........
..........
..........
..........
                """, 9),
                Arguments.of(
                    """
............
........0...
.....0......
.......0....
....0.......
......A.....
............
............
........A...
.........A..
............
............
                    """, 34)
            );
    }
}